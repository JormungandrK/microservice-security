// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "acl-manager": Application User Types
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/microservice-security/acl/rest
// --out=$(GOPATH)/src/github.com/JormungandrK/microservice-security/acl/rest
// --version=v1.2.0-dirty

package app

// ACL Policy Payload
type aCLPolicyPayload struct {
	// Actions to match the request against.
	Actions []string `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
	// Custom conditions
	Conditions []*condition `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// allow or deny
	Effect *string `form:"effect,omitempty" json:"effect,omitempty" xml:"effect,omitempty"`
	// Policy ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Resources to which this policy applies.
	Resources []string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	// Subjects to match the request against.
	Subjects []string `form:"subjects,omitempty" json:"subjects,omitempty" xml:"subjects,omitempty"`
}

// Publicize creates ACLPolicyPayload from aCLPolicyPayload
func (ut *aCLPolicyPayload) Publicize() *ACLPolicyPayload {
	var pub ACLPolicyPayload
	if ut.Actions != nil {
		pub.Actions = ut.Actions
	}
	if ut.Conditions != nil {
		pub.Conditions = make([]*Condition, len(ut.Conditions))
		for i2, elem2 := range ut.Conditions {
			pub.Conditions[i2] = elem2.Publicize()
		}
	}
	if ut.Description != nil {
		pub.Description = ut.Description
	}
	if ut.Effect != nil {
		pub.Effect = ut.Effect
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Resources != nil {
		pub.Resources = ut.Resources
	}
	if ut.Subjects != nil {
		pub.Subjects = ut.Subjects
	}
	return &pub
}

// ACL Policy Payload
type ACLPolicyPayload struct {
	// Actions to match the request against.
	Actions []string `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
	// Custom conditions
	Conditions []*Condition `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// allow or deny
	Effect *string `form:"effect,omitempty" json:"effect,omitempty" xml:"effect,omitempty"`
	// Policy ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Resources to which this policy applies.
	Resources []string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	// Subjects to match the request against.
	Subjects []string `form:"subjects,omitempty" json:"subjects,omitempty" xml:"subjects,omitempty"`
}

// Custom ACL policy condition
type condition struct {
	// Condition name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Patterns to match the value against.
	Patterns []string `form:"patterns,omitempty" json:"patterns,omitempty" xml:"patterns,omitempty"`
	// Condition type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Publicize creates Condition from condition
func (ut *condition) Publicize() *Condition {
	var pub Condition
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	if ut.Patterns != nil {
		pub.Patterns = ut.Patterns
	}
	if ut.Type != nil {
		pub.Type = ut.Type
	}
	return &pub
}

// Custom ACL policy condition
type Condition struct {
	// Condition name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Patterns to match the value against.
	Patterns []string `form:"patterns,omitempty" json:"patterns,omitempty" xml:"patterns,omitempty"`
	// Condition type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}
